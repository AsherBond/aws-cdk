"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const integ = require("@aws-cdk/integ-tests-alpha");
const aws_dynamodb_1 = require("aws-cdk-lib/aws-dynamodb");
const customAspect = require("../lib/nodejs-aspect");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const iam = require("aws-cdk-lib/aws-iam");
/**
 * This test creates a stack and changes termination protection with the setter.
 */
//Dynamo DB
class NodejsAspectTest extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Test for Lambda provider
        new aws_dynamodb_1.Table(this, 'Table', {
            partitionKey: { name: 'hashKey', type: aws_dynamodb_1.AttributeType.STRING },
            removalPolicy: cdk.RemovalPolicy.DESTROY,
            replicationRegions: ['us-east-2'],
        });
    }
}
const app = new cdk.App();
const stack = new NodejsAspectTest(app, 'NodejsStack', { terminationProtection: false });
// Test for Custom Resource Provider
const noClients = new iam.OpenIdConnectProvider(stack, 'NoClientsNoThumbprint', {
    url: 'https://oidc.eks.us-east-1.amazonaws.com/id/test2',
});
const clients = new iam.OpenIdConnectProvider(stack, 'Clients', {
    url: 'https://oidc.eks.us-east-1.amazonaws.com/id/test3',
    clientIds: ['foo', 'bar'],
});
const thumbprints = new iam.OpenIdConnectProvider(stack, 'Thumbprints', {
    url: 'https://oidc.eks.us-east-1.amazonaws.com/id/test4',
    thumbprints: [
        'aa00aa1122aa00aa1122aa00aa1122aa00aa1122',
        'aa00aa1122aa00aa1122aa00aa1122aa00aa1111',
    ],
});
new cdk.CfnOutput(stack, 'NoClientsThumbprints', {
    value: `${noClients.openIdConnectProviderthumbprints}`,
});
new cdk.CfnOutput(stack, 'ClientsThumbprints', {
    value: `${clients.openIdConnectProviderthumbprints}`,
});
new cdk.CfnOutput(stack, 'ThumbprintsThumbprints', {
    value: `${thumbprints.openIdConnectProviderthumbprints}`,
});
cdk.Aspects.of(stack).add(customAspect.NodeJsAspect.modifyRuntimeTo(aws_lambda_1.Runtime.NODEJS_20_X));
new integ.IntegTest(app, 'stack', { testCases: [stack] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuYXNwZWN0LXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaW50ZWcuYXNwZWN0LXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBQ25DLG9EQUFvRDtBQUVwRCwyREFBZ0U7QUFDaEUscURBQXFEO0FBQ3JELHVEQUFpRDtBQUNqRCwyQ0FBMkM7QUFDM0M7O0dBRUc7QUFFSCxXQUFXO0FBQ1gsTUFBTSxnQkFBaUIsU0FBUSxHQUFHLENBQUMsS0FBSztJQUV0QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLDJCQUEyQjtRQUMzQixJQUFJLG9CQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRTtZQUN2QixZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSw0QkFBYSxDQUFDLE1BQU0sRUFBRTtZQUM3RCxhQUFhLEVBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxPQUFPO1lBQ3hDLGtCQUFrQixFQUFFLENBQUMsV0FBVyxDQUFDO1NBQ2xDLENBQUMsQ0FBQztLQUVKO0NBQ0Y7QUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLEtBQUssR0FBRyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBRXpGLG9DQUFvQztBQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsdUJBQXVCLEVBQUU7SUFDOUUsR0FBRyxFQUFFLG1EQUFtRDtDQUN6RCxDQUFDLENBQUM7QUFFSCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFO0lBQzlELEdBQUcsRUFBRSxtREFBbUQ7SUFDeEQsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQztDQUMxQixDQUFDLENBQUM7QUFFSCxNQUFNLFdBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO0lBQ3RFLEdBQUcsRUFBRSxtREFBbUQ7SUFDeEQsV0FBVyxFQUFFO1FBQ1gsMENBQTBDO1FBQzFDLDBDQUEwQztLQUMzQztDQUNGLENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsc0JBQXNCLEVBQUU7SUFDL0MsS0FBSyxFQUFFLEdBQUcsU0FBUyxDQUFDLGdDQUFnQyxFQUFFO0NBQ3ZELENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsb0JBQW9CLEVBQUU7SUFDN0MsS0FBSyxFQUFFLEdBQUcsT0FBTyxDQUFDLGdDQUFnQyxFQUFFO0NBQ3JELENBQUMsQ0FBQztBQUVILElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsd0JBQXdCLEVBQUU7SUFDakQsS0FBSyxFQUFFLEdBQUcsV0FBVyxDQUFDLGdDQUFnQyxFQUFFO0NBQ3pELENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQyxvQkFBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDMUYsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgaW50ZWcgZnJvbSAnQGF3cy1jZGsvaW50ZWctdGVzdHMtYWxwaGEnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cy9saWIvY29uc3RydWN0JztcbmltcG9ydCB7IEF0dHJpYnV0ZVR5cGUsIFRhYmxlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWR5bmFtb2RiJztcbmltcG9ydCAqIGFzIGN1c3RvbUFzcGVjdCBmcm9tICcuLi9saWIvbm9kZWpzLWFzcGVjdCc7XG5pbXBvcnQgeyBSdW50aW1lIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYSc7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG4vKipcbiAqIFRoaXMgdGVzdCBjcmVhdGVzIGEgc3RhY2sgYW5kIGNoYW5nZXMgdGVybWluYXRpb24gcHJvdGVjdGlvbiB3aXRoIHRoZSBzZXR0ZXIuXG4gKi9cblxuLy9EeW5hbW8gREJcbmNsYXNzIE5vZGVqc0FzcGVjdFRlc3QgZXh0ZW5kcyBjZGsuU3RhY2sge1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcbiAgICAvLyBUZXN0IGZvciBMYW1iZGEgcHJvdmlkZXJcbiAgICBuZXcgVGFibGUodGhpcywgJ1RhYmxlJywge1xuICAgICAgcGFydGl0aW9uS2V5OiB7IG5hbWU6ICdoYXNoS2V5JywgdHlwZTogQXR0cmlidXRlVHlwZS5TVFJJTkcgfSxcbiAgICAgIHJlbW92YWxQb2xpY3k6IGNkay5SZW1vdmFsUG9saWN5LkRFU1RST1ksXG4gICAgICByZXBsaWNhdGlvblJlZ2lvbnM6IFsndXMtZWFzdC0yJ10sXG4gICAgfSk7XG5cbiAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuY29uc3Qgc3RhY2sgPSBuZXcgTm9kZWpzQXNwZWN0VGVzdChhcHAsICdOb2RlanNTdGFjaycsIHsgdGVybWluYXRpb25Qcm90ZWN0aW9uOiBmYWxzZSB9KTtcblxuLy8gVGVzdCBmb3IgQ3VzdG9tIFJlc291cmNlIFByb3ZpZGVyXG5jb25zdCBub0NsaWVudHMgPSBuZXcgaWFtLk9wZW5JZENvbm5lY3RQcm92aWRlcihzdGFjaywgJ05vQ2xpZW50c05vVGh1bWJwcmludCcsIHtcbiAgdXJsOiAnaHR0cHM6Ly9vaWRjLmVrcy51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS9pZC90ZXN0MicsXG59KTtcblxuY29uc3QgY2xpZW50cyA9IG5ldyBpYW0uT3BlbklkQ29ubmVjdFByb3ZpZGVyKHN0YWNrLCAnQ2xpZW50cycsIHtcbiAgdXJsOiAnaHR0cHM6Ly9vaWRjLmVrcy51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS9pZC90ZXN0MycsXG4gIGNsaWVudElkczogWydmb28nLCAnYmFyJ10sXG59KTtcblxuY29uc3QgdGh1bWJwcmludHMgPSBuZXcgaWFtLk9wZW5JZENvbm5lY3RQcm92aWRlcihzdGFjaywgJ1RodW1icHJpbnRzJywge1xuICB1cmw6ICdodHRwczovL29pZGMuZWtzLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tL2lkL3Rlc3Q0JyxcbiAgdGh1bWJwcmludHM6IFtcbiAgICAnYWEwMGFhMTEyMmFhMDBhYTExMjJhYTAwYWExMTIyYWEwMGFhMTEyMicsXG4gICAgJ2FhMDBhYTExMjJhYTAwYWExMTIyYWEwMGFhMTEyMmFhMDBhYTExMTEnLFxuICBdLFxufSk7XG5cbm5ldyBjZGsuQ2ZuT3V0cHV0KHN0YWNrLCAnTm9DbGllbnRzVGh1bWJwcmludHMnLCB7XG4gIHZhbHVlOiBgJHtub0NsaWVudHMub3BlbklkQ29ubmVjdFByb3ZpZGVydGh1bWJwcmludHN9YCxcbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ0NsaWVudHNUaHVtYnByaW50cycsIHtcbiAgdmFsdWU6IGAke2NsaWVudHMub3BlbklkQ29ubmVjdFByb3ZpZGVydGh1bWJwcmludHN9YCxcbn0pO1xuXG5uZXcgY2RrLkNmbk91dHB1dChzdGFjaywgJ1RodW1icHJpbnRzVGh1bWJwcmludHMnLCB7XG4gIHZhbHVlOiBgJHt0aHVtYnByaW50cy5vcGVuSWRDb25uZWN0UHJvdmlkZXJ0aHVtYnByaW50c31gLFxufSk7XG5cbmNkay5Bc3BlY3RzLm9mKHN0YWNrKS5hZGQoY3VzdG9tQXNwZWN0Lk5vZGVKc0FzcGVjdC5tb2RpZnlSdW50aW1lVG8oUnVudGltZS5OT0RFSlNfMjBfWCkpO1xubmV3IGludGVnLkludGVnVGVzdChhcHAsICdzdGFjaycsIHsgdGVzdENhc2VzOiBbc3RhY2tdIH0pOyJdfQ==